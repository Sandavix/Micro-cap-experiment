name: Trader (Paper)

on:
  workflow_dispatch: {}      # lancement manuel
  push:
    paths:
      - "trading_script.py"
      - "requirements.txt"
      - ".github/workflows/trader.yml"

permissions:
  contents: write            # nécessaire pour commit/push des artefacts JSON/log

concurrency:
  group: trader-paper
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    env:
      # ——— Secrets existants ———
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
      ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}

      # ——— Variables attendues par le SDK Alpaca ———
      APCA_API_KEY_ID: ${{ secrets.ALPACA_API_KEY }}
      APCA_API_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
      APCA_API_BASE_URL: https://paper-api.alpaca.markets

      # On force le mode paper côté bash/python
      EXECUTE_PAPER: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null 2>&1 || true
            sudo apt-get install -y jq >/dev/null 2>&1 || true
          fi

      - name: Sanity check Alpaca (Paper)
        run: |
          python - <<'PY'
          import os, json, sys
          import urllib.request

          base = os.environ.get('APCA_API_BASE_URL', 'https://paper-api.alpaca.markets')
          req = urllib.request.Request(
              f"{base}/v2/account",
              headers={
                  "APCA-API-KEY-ID": os.environ["APCA_API_KEY_ID"],
                  "APCA-API-SECRET-KEY": os.environ["APCA_API_SECRET_KEY"],
              }
          )
          try:
              with urllib.request.urlopen(req, timeout=20) as r:
                  body = r.read().decode("utf-8", "replace")
                  print("status_code:", r.status)
                  try:
                      print(json.dumps(json.loads(body), indent=2))
                  except Exception:
                      print(body)
                  if r.status != 200:
                      sys.exit(1)
          except Exception as e:
              print("Sanity check failed:", e)
              sys.exit(1)
          PY

      - name: Run trader (Paper) + dump infos
        run: |
          set -Eeuo pipefail
          echo "EXECUTE_PAPER=${EXECUTE_PAPER}"
          python --version

          PAPER_URL="https://paper-api.alpaca.markets"

          echo "---- Alpaca clock (paper) ----"
          curl -s \
            -H "APCA-API-KEY-ID: ${APCA_API_KEY_ID}" \
            -H "APCA-API-SECRET-KEY: ${APCA_API_SECRET_KEY}" \
            "${PAPER_URL}/v2/clock" | jq -r '"is_open=\(.is_open) next_open=\(.next_open) next_close=\(.next_close)"' || true

          if [[ "${EXECUTE_PAPER}" == "true" ]]; then
            echo "[RUN] Paper trading ON"
            export APCA_API_BASE_URL="${PAPER_URL}"
            python -u trading_script.py 2>&1 | tee run.log
          else
            echo "[RUN] Dry-run (no orders sent)"
            python -u trading_script.py --dry-run 2>&1 | tee run.log
          fi

          echo "---- run.log stats ----"
          test -f run.log && { echo "bytes=$(wc -c < run.log)  lines=$(wc -l < run.log)"; } || echo "run.log missing"
          echo "---- tail run.log (last 200) ----"
          tail -n 200 run.log || true

          echo "---- Verify recent Alpaca orders (Paper, last 5) ----"
          curl -s \
            -H "APCA-API-KEY-ID: ${APCA_API_KEY_ID}" \
            -H "APCA-API-SECRET-KEY: ${APCA_API_SECRET_KEY}" \
            "${PAPER_URL}/v2/orders?status=all&limit=5&direction=desc" > alpaca_orders_paper.json || echo "[]" > alpaca_orders_paper.json
          echo "RAW (paper orders):"
          jq -c '.' alpaca_orders_paper.json || cat alpaca_orders_paper.json || true
          echo "PARSED (paper orders):"
          jq -r 'if type=="array" then
                    .[] | "\(.submitted_at // "?")  \(.symbol // "?")  \(.side // "?")  qty=\(.qty // "?")  status=\(.status // "?")  id=\(.id // "?")"
                 else
                    "Not an array: type=\(type)"
                 end' alpaca_orders_paper.json || true

          echo "---- Positions (Paper) ----"
          curl -s \
            -H "APCA-API-KEY-ID: ${APCA_API_KEY_ID}" \
            -H "APCA-API-SECRET-KEY: ${APCA_API_SECRET_KEY}" \
            "${PAPER_URL}/v2/positions" > alpaca_positions_paper.json || echo "[]" > alpaca_positions_paper.json
          jq -r 'if type=="array" and length>0 then
                    .[] | "\(.symbol) qty=\(.qty) avg_entry=\(.avg_entry_price)"
                 else
                    "No positions or non-array."
                 end' alpaca_positions_paper.json || true

          echo "---- Activities FILL (Paper, recent) ----"
          curl -s \
            -H "APCA-API-KEY-ID: ${APCA_API_KEY_ID}" \
            -H "APCA-API-SECRET-KEY: ${APCA_API_SECRET_KEY}" \
            "${PAPER_URL}/v2/account/activities?activity_types=FILL&direction=desc&page_size=25" > activities_paper.json || echo "[]" > activities_paper.json
          jq -r 'if type=="array" and length>0 then
                    .[] | "\(.transaction_time // "?") \(.symbol // "?") \(.side // "?") qty=\(.qty // "?") price=\(.price // "?")"
                 else
                    "No fills or non-array."
                 end' activities_paper.json || true

      - name: Commit & push artifacts
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Auto run $(date -u +%F)" || echo "No changes"
          git pull --rebase || true
          git push || true
