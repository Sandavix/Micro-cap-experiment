name: portfolio-bot

on:
  workflow_dispatch:
  schedule:
    # 13:35 UTC ≈ 15:35 en été en Suisse (marchés US ouverts +5 min)
    - cron: '35 13 * * 1-5'

permissions:
  contents: write

concurrency:
  group: portfolio-bot
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
      ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- Bloc : Debunk Error (run & verify) ---
      - name: Debunk Error (run & verify)
        env:
          # Normalise le nom de variable côté GitHub (on couvre plusieurs variantes)
          EXECUTE_PAPER: ${{ vars.executePaper || vars.EXECUTE_PAPER || vars.EXECUTEPAPER || 'false' }}
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        run: |
          set -Eeuo pipefail

          # jq (pour parser les réponses Alpaca)
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null 2>&1 || true
            sudo apt-get install -y jq >/dev/null 2>&1 || true
          fi

          echo "EXECUTE_PAPER=${EXECUTE_PAPER}"
          python --version

          PAPER_URL="https://paper-api.alpaca.markets"
          LIVE_URL="https://api.alpaca.markets"

          echo "---- Alpaca clock (paper) ----"
          curl -s -H "APCA-API-KEY-ID: ${ALPACA_API_KEY}" -H "APCA-API-SECRET-KEY: ${ALPACA_SECRET_KEY}" \
            "${PAPER_URL}/v2/clock" | jq -r '"is_open=\(.is_open) next_open=\(.next_open) next_close=\(.next_close)"' || true

          # --- Run trading script (comme Nathan) ---
          if [[ "${EXECUTE_PAPER}" == "true" ]]; then
            echo "[RUN] Paper trading ON"
            export APCA_API_BASE_URL="${PAPER_URL}"   # force l'SDK sur Paper
            python -u trading_script.py 2>&1 | tee run.log
          else
            echo "[RUN] Dry-run (no orders sent)"
            python -u trading_script.py --dry-run 2>&1 | tee run.log
          fi

          echo "---- run.log stats ----"
          test -f run.log && { echo "bytes=$(wc -c < run.log)  lines=$(wc -l < run.log)"; } || echo "run.log missing"
          echo "---- tail run.log (last 200) ----"
          tail -n 200 run.log || true

          # --- Verify with Alpaca (Paper orders) ---
          echo "---- Verify recent Alpaca orders (Paper, last 5) ----"
          curl -s -H "APCA-API-KEY-ID: ${ALPACA_API_KEY}" -H "APCA-API-SECRET-KEY: ${ALPACA_SECRET_KEY}" \
            "${PAPER_URL}/v2/orders?status=all&limit=5&direction=desc" > alpaca_orders_paper.json || echo "[]"
          echo "RAW (paper orders):"
          jq -c '.' alpaca_orders_paper.json || cat alpaca_orders_paper.json || true
          echo "PARSED (paper orders):"
          jq -r 'if type=="array" then
                    .[] | "\(.submitted_at // "?")  \(.symbol // "?")  \(.side // "?")  qty=\(.qty // "?")  status=\(.status // "?")  id=\(.id // "?")"
                 else
                    "Not an array: type=\(type)"
                 end' alpaca_orders_paper.json || true

          # --- Positions & Fills (Paper) ---
          echo "---- Positions (Paper) ----"
          curl -s -H "APCA-API-KEY-ID: ${ALPACA_API_KEY}" -H "APCA-API-SECRET-KEY: ${ALPACA_SECRET_KEY}" \
            "${PAPER_URL}/v2/positions" > alpaca_positions_paper.json || echo "[]"
          jq -r 'if type=="array" and length>0 then
                    .[] | "\(.symbol) qty=\(.qty) avg_entry=\(.avg_entry_price)"
                 else
                    "No positions or non-array."
                 end' alpaca_positions_paper.json || true

          echo "---- Activities FILL (Paper, recent) ----"
          curl -s -H "APCA-API-KEY-ID: ${ALPACA_API_KEY}" -H "APCA-API-SECRET-KEY: ${ALPACA_SECRET_KEY}" \
            "${PAPER_URL}/v2/account/activities?activity_types=FILL&direction=desc&page_size=25" > activities_paper.json || echo "[]"
          jq -r 'if type=="array" and length>0 then
                    .[] | "\(.transaction_time // "?") \(.symbol // "?") \(.side // "?") qty=\(.qty // "?") price=\(.price // "?")"
                 else
                    "No fills or non-array."
                 end' activities_paper.json || true

          # --- Verify with Alpaca (Live orders) - pour check rapide d'un mauvais endpoint ---
          echo "---- Verify recent Alpaca orders (Live, last 5) ----"
          curl -s -H "APCA-API-KEY-ID: ${ALPACA_API_KEY}" -H "APCA-API-SECRET-KEY: ${ALPACA_SECRET_KEY}" \
            "${LIVE_URL}/v2/orders?status=all&limit=5&direction=desc" > alpaca_orders_live.json || echo "[]"
          echo "RAW (live orders):"
          jq -c '.' alpaca_orders_live.json || cat alpaca_orders_live.json || true
          echo "PARSED (live orders):"
          jq -r 'if type=="array" then
                    .[] | "\(.submitted_at // "?")  \(.symbol // "?")  \(.side // "?")  qty=\(.qty // "?")  status=\(.status // "?")  id=\(.id // "?")"
                 else
                    "Not an array: type=\(type)"
                 end' alpaca_orders_live.json || true

      - name: Commit outputs
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Auto run $(date -u +%F)" || echo "No changes"
          git pull --rebase || true
          git push || true
